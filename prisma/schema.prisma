// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password_hash  String
  role           Role     @default(user)
  institution_id Int?
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  institution      Institution?     @relation(fields: [institution_id], references: [id])
  documents        Document[]
  analysis_results AnalysisResult[]

  @@map("users")
}

model Institution {
  id               Int      @id @default(autoincrement())
  name             String
  full_name        String?
  category         String?
  address          String?
  phone            String?
  email            String?
  website          String?
  established_year Int?
  total_employees  Int?
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  users                 User[]
  documents             Document[]
  analysis_results      AnalysisResult[]
  compliance_indicators ComplianceIndicator[]

  @@map("institutions")
}

model Document {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  filename       String
  file_path      String
  file_size      Int?
  file_type      String?
  institution_id Int
  uploaded_by    Int
  created_at     DateTime @default(now())

  // Relations
  institution      Institution      @relation(fields: [institution_id], references: [id])
  uploaded_by_user User             @relation(fields: [uploaded_by], references: [id])
  analysis_results AnalysisResult[]

  @@map("documents")
}

model AnalysisResult {
  id                   Int      @id @default(autoincrement())
  analysis_id          String   @unique // UUID from external API
  institution_id       Int
  user_id              Int
  judul_kegiatan       String
  deskripsi_kegiatan   String
  include_dok_keuangan Boolean  @default(false)
  path_dok_kegiatan    String?
  path_dok_keuangan    String?
  score_compliance     Float // from summary_indicator_compliance
  tingkat_risiko       Int // from summary_indicator_compliance
  status               String   @default("success") // success, error, processing
  error_message        String?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relations
  institution           Institution                   @relation(fields: [institution_id], references: [id])
  user                  User                          @relation(fields: [user_id], references: [id])
  analysis_files        AnalysisFile[]
  compliance_indicators AnalysisComplianceIndicator[]
  recommendations       AnalysisRecommendation[]
  related_regulations   AnalysisRelatedRegulation[]
  Document              Document?                     @relation(fields: [documentId], references: [id])
  documentId            Int?

  @@map("analysis_results")
}

model AnalysisFile {
  id            Int      @id @default(autoincrement())
  analysis_id   Int
  file_type     FileType // dok_kegiatan, dok_keuangan
  original_name String
  stored_path   String
  file_size     Int
  mime_type     String?
  created_at    DateTime @default(now())

  // Relations
  analysis_result AnalysisResult @relation(fields: [analysis_id], references: [id], onDelete: Cascade)

  @@map("analysis_files")
}

model AnalysisComplianceIndicator {
  id              Int      @id @default(autoincrement())
  analysis_id     Int
  id_indikator    Int
  nama            String
  encode_class    Int // 1: Sangat Sesuai, 2: Cukup, 3: Tidak Sesuai, 0: None
  detail_analisis String
  alasan_analisis String
  score_indikator Float
  created_at      DateTime @default(now())

  // Relations
  analysis_result AnalysisResult @relation(fields: [analysis_id], references: [id], onDelete: Cascade)

  @@map("analysis_compliance_indicators")
}

model AnalysisRecommendation {
  id                    Int      @id @default(autoincrement())
  analysis_id           Int
  id_indikator          Int
  judul_rekomendasi     String
  deskripsi_rekomendasi String
  langkah_rekomendasi   String[] // Array of steps
  created_at            DateTime @default(now())

  // Relations
  analysis_result AnalysisResult @relation(fields: [analysis_id], references: [id], onDelete: Cascade)

  @@map("analysis_recommendations")
}

model AnalysisRelatedRegulation {
  id                Int      @id @default(autoincrement())
  analysis_id       Int
  judul_peraturan   String
  instansi          String
  tingkat_kepatuhan Float
  url_pera          String?
  created_at        DateTime @default(now())

  // Relations
  analysis_result AnalysisResult @relation(fields: [analysis_id], references: [id], onDelete: Cascade)

  @@map("analysis_related_regulations")
}

model ComplianceIndicator {
  id              Int           @id @default(autoincrement())
  institution_id  Int
  indicator_name  String
  indicator_type  IndicatorType
  sangat_sesuai   Int           @default(0)
  sebagian_sesuai Int           @default(0)
  tidak_sesuai    Int           @default(0)
  none_count      Int           @default(0)
  calculated_at   DateTime      @default(now())

  // Relations
  institution Institution @relation(fields: [institution_id], references: [id])

  @@unique([institution_id, indicator_name])
  @@map("compliance_indicators")
}

enum Role {
  admin
  user
}

enum AnalysisType {
  compliance
  sentiment
  recommendation
}

enum IndicatorType {
  document
  sentiment
}

enum FileType {
  dok_kegiatan
  dok_keuangan
}
